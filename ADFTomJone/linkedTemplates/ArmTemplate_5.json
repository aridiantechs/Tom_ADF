{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ADFTomJone"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/tgt_ListFileLoad')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureSQLDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ClientID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ListID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "varchar"
					},
					{
						"name": "Description",
						"type": "varchar"
					},
					{
						"name": "DateCreated",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "Active",
						"type": "varchar"
					},
					{
						"name": "ListType",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "import",
					"table": "EmailList"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/tgt_PlayerAccount')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureSQLDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Date",
						"type": "varchar"
					},
					{
						"name": "RowId",
						"type": "varchar"
					},
					{
						"name": "CurrencySymbol",
						"type": "varchar"
					},
					{
						"name": "TotalRecords",
						"type": "varchar"
					},
					{
						"name": "MerchantId",
						"type": "varchar"
					},
					{
						"name": "MerchantName",
						"type": "varchar"
					},
					{
						"name": "UserName",
						"type": "varchar"
					},
					{
						"name": "SiteId",
						"type": "varchar"
					},
					{
						"name": "BannerId",
						"type": "varchar"
					},
					{
						"name": "CreativeName",
						"type": "varchar"
					},
					{
						"name": "BannerType",
						"type": "varchar"
					},
					{
						"name": "PlayerId",
						"type": "varchar"
					},
					{
						"name": "RegistrationDate",
						"type": "varchar"
					},
					{
						"name": "FirstDeposit",
						"type": "varchar"
					},
					{
						"name": "Prod2Commission",
						"type": "varchar"
					},
					{
						"name": "RevShareCommission",
						"type": "varchar"
					},
					{
						"name": "TotalCpaCommission",
						"type": "varchar"
					},
					{
						"name": "CpaCommissionCount",
						"type": "varchar"
					},
					{
						"name": "TotalCommission",
						"type": "varchar"
					},
					{
						"name": "New",
						"type": "varchar"
					},
					{
						"name": "NetRevenue",
						"type": "varchar"
					},
					{
						"name": "LastClickReferralURL",
						"type": "varchar"
					},
					{
						"name": "LastClickIP",
						"type": "varchar"
					},
					{
						"name": "LastClickCountry",
						"type": "varchar"
					},
					{
						"name": "Deposits",
						"type": "decimal",
						"precision": 12,
						"scale": 2
					},
					{
						"name": "PLayerSK",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PlatformId",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "import",
					"table": "PlayerAccount"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/tgt_SendJobs')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureSQLDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ClientID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SendID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FromName",
						"type": "varchar"
					},
					{
						"name": "FromEmail",
						"type": "varchar"
					},
					{
						"name": "SchedTime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "SentTime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "Subject",
						"type": "varchar"
					},
					{
						"name": "Emailname",
						"type": "varchar"
					},
					{
						"name": "TriggeredSendExternalkey",
						"type": "varchar"
					},
					{
						"name": "SendDefinitionExternalKey",
						"type": "varchar"
					},
					{
						"name": "JobStatus",
						"type": "varchar"
					},
					{
						"name": "PreviewURL",
						"type": "varchar"
					},
					{
						"name": "IsMultipart",
						"type": "varchar"
					},
					{
						"name": "Additional",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "import",
					"table": "EmailSendJobs"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/tgt_Sent')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureSQLDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ClientID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SendID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SubscriberKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "EmailAddress",
						"type": "varchar"
					},
					{
						"name": "SubscriberID",
						"type": "varchar"
					},
					{
						"name": "ListID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "EventDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EventType",
						"type": "varchar"
					},
					{
						"name": "BatchID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TriggeredExternalKey",
						"type": "varchar"
					},
					{
						"name": "CompaignID",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "import",
					"table": "EmailSent"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/tgt_WhiteZippcPlayer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureSQLDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "import",
					"table": "Zippcplayer"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/tgt_attributes')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureSQLDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ClientID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SubscriberKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "EmailAddress",
						"type": "varchar"
					},
					{
						"name": "SubscriberID",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "import",
					"table": "EmailAttributes"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/tgt_bounces')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureSQLDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ClientID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SendID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SubscriberKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "EmailAddress",
						"type": "varchar"
					},
					{
						"name": "SubscriberID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ListID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "EventDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EventType",
						"type": "varchar"
					},
					{
						"name": "Bouncecategory",
						"type": "varchar"
					},
					{
						"name": "SMTPCode",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BounceReason",
						"type": "varchar"
					},
					{
						"name": "BatchID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TriggeredSendExternalKey",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "import",
					"table": "EmailBounces"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/tgt_clicks')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureSQLDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ClientID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SendID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SubscriberKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "EmailAddress",
						"type": "varchar"
					},
					{
						"name": "SubscriberID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ListID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "EventDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EventType",
						"type": "varchar"
					},
					{
						"name": "SendURLID",
						"type": "varchar"
					},
					{
						"name": "URLID",
						"type": "varchar"
					},
					{
						"name": "URL",
						"type": "varchar"
					},
					{
						"name": "Alias",
						"type": "varchar"
					},
					{
						"name": "BatchID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TriggeredSendExternalKey",
						"type": "varchar"
					},
					{
						"name": "IsUnique",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "import",
					"table": "EmailClicks"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/tgt_complaints')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureSQLDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ClientID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SendID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SubscriberKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "EmailAddress",
						"type": "varchar"
					},
					{
						"name": "SubscriberID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ListID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "EventDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EventType",
						"type": "varchar"
					},
					{
						"name": "BatchID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TriggeredSendExternalKey",
						"type": "varchar"
					},
					{
						"name": "Domain",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "import",
					"table": "EmailComplaints"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/tgt_importMerchant')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureSQLDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "AffiliateId",
						"type": "varchar"
					},
					{
						"name": "Username",
						"type": "varchar"
					},
					{
						"name": "EmailAddress",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "import",
					"table": "Merchant"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/tgt_opens')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureSQLDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ClientID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SendID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SubscriberKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "EmailAddress",
						"type": "varchar"
					},
					{
						"name": "SubscriberID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ListID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "EventDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "EventType",
						"type": "varchar"
					},
					{
						"name": "BatchID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TriggeredSendExternalKey",
						"type": "varchar"
					},
					{
						"name": "IsUnique",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "import",
					"table": "EmailOpens"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Child Email Compaign')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "List file load",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "ClientID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ClientID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "ListID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ListID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Name",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Description",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Description",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DateCreated",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "DateCreated",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "Status",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Active",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ListType",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ListType",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "src_ListFileLoad",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "tgt_ListFileLoad",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "List_xm file load",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "ClientID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ClientID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "ListID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ListID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Name",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Description",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Description",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DateCreated",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "DateCreated",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "Status",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Active",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ListType",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ListType",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "src_List_xm",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "tgt_ListFileLoad",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Remove Email list table Duplicates",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "List file load",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "List_xm file load",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "LS_AzureSQLDB",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "With CTE AS\n(\n\tSELECT \n\t\t[ClientID],\n\t\t[ListID],\n\t\t[Name],\n\t\t[Description],\n\t\t[DateCreated],\n\t\t[Active],\n\t\t[ListType],\n\t\tROW_NUMBER() OVER(\n\t\t\t\t\t\t\tPARTITION BY\n\t\t\t\t\t\t\t\t\t[ClientID],\n\t\t\t\t\t\t\t\t\t[ListID],\n\t\t\t\t\t\t\t\t\t[Name],\n\t\t\t\t\t\t\t\t\t[Description],\n\t\t\t\t\t\t\t\t\t[DateCreated],\n\t\t\t\t\t\t\t\t\t[Active],\n\t\t\t\t\t\t\t\t\t[ListType]\n\t\t\t\t\t\t\tORDER BY\n\t\t\t\t\t\t\t\t\t[ClientID],\n\t\t\t\t\t\t\t\t\t[ListID],\n\t\t\t\t\t\t\t\t\t[Name],\n\t\t\t\t\t\t\t\t\t[Description],\n\t\t\t\t\t\t\t\t\t[DateCreated],\n\t\t\t\t\t\t\t\t\t[Active],\n\t\t\t\t\t\t\t\t\t[ListType]\n\t\t\t\t\t\t) ROW_NUM\n\n\tFROM [Import].[EmailList]\n)\nDELETE FROM CTE\nWHERE ROW_NUM >1"
								}
							]
						}
					},
					{
						"name": "Attributes file load",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "ClientID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ClientID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "SubscriberKey",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SubscriberKey",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "EmailAddress",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "EmailAddress",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "SubscriberID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SubscriberID",
											"type": "Int32",
											"physicalType": "int"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "src_attributes",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "tgt_attributes",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Attributes_xm file load",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "ClientID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ClientID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "SubscriberKey",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SubscriberKey",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "EmailAddress",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "EmailAddress",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "SubscriberID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SubscriberID",
											"type": "Int32",
											"physicalType": "int"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "src_attributes_xm",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "tgt_attributes",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Remove Atrributes table duplicates",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Attributes file load",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Attributes_xm file load",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "LS_AzureSQLDB",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "\nWith CTE AS\n(\n\tSELECT \n\t\t[ClientID],\n\t\t[SubscriberKey],\n\t\t[EmailAddress],\n\t\t[SubscriberID],\n\n\t\tROW_NUMBER() OVER(\n\t\t\t\t\t\t\tPARTITION BY\n\t\t\t\t\t\t\t\t\t[ClientID],\n\t\t\t\t\t\t\t\t\t[SubscriberKey],\n\t\t\t\t\t\t\t\t\t[EmailAddress],\n\t\t\t\t\t\t\t\t\t[SubscriberID]\n\t\t\t\t\t\t\tORDER BY\n\t\t\t\t\t\t\t\t\t[ClientID],\n\t\t\t\t\t\t\t\t\t[SubscriberKey],\n\t\t\t\t\t\t\t\t\t[EmailAddress],\n\t\t\t\t\t\t\t\t\t[SubscriberID]\n\t\t\t\t\t\t) ROW_NUM\n\n\tFROM [Import].[EmailAttributes]\n)\nDELETE FROM CTE\nWHERE ROW_NUM >1"
								}
							]
						}
					},
					{
						"name": "SendJobs file load",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "ClientID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ClientID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "SendID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SendID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "FromName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "FromName",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "FromEmail",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "FromEmail",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "SchedTime",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SchedTime",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "SentTime",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SentTime",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "Subject",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Subject",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "EmailName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Emailname",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "TriggeredSendExternalKey",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "TriggeredSendExternalkey",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "SendDefinitionExternalKey",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SendDefinitionExternalKey",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "JobStatus",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "JobStatus",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "PreviewURL",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "PreviewURL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "IsMultipart",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "IsMultipart",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Additional",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Additional",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "src_SendJobsfile",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "tgt_SendJobs",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "SendJobs_xm file load",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "ClientID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ClientID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "SendID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SendID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "FromName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "FromName",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "FromEmail",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "FromEmail",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "SchedTime",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SchedTime",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "SentTime",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SentTime",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "Subject",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Subject",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "EmailName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Emailname",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "TriggeredSendExternalKey",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "TriggeredSendExternalkey",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "SendDefinitionExternalKey",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SendDefinitionExternalKey",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "JobStatus",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "JobStatus",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "PreviewURL",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "PreviewURL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "IsMultipart",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "IsMultipart",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Additional",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Additional",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "src_SendJobs_xm",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "tgt_SendJobs",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Remove SendJobs table duplicates",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "SendJobs file load",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SendJobs_xm file load",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "LS_AzureSQLDB",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "With CTE AS\n(\n\tSELECT \n\t\t[ClientID],\n\t\t[SendID],\n\t\t[FromName],\n\t\t[FromEmail],\n\t\t[SchedTime],\n\t\t[SentTime],\n\t\t[Subject],\n\t\t[Emailname],\n\t\t[TriggeredSendExternalkey],\n\t\t[SendDefinitionExternalKey],\n\t\t[JobStatus],\n\t\t[PreviewURL],\n\t\t[IsMultipart],\n\t\t[Additional],\n\n\t\tROW_NUMBER() OVER(\n\t\t\t\t\t\t\tPARTITION BY\n\t\t\t\t\t\t\t\t\t[ClientID],\n\t\t\t\t\t\t\t\t\t[SendID],\n\t\t\t\t\t\t\t\t\t[FromName],\n\t\t\t\t\t\t\t\t\t[FromEmail],\n\t\t\t\t\t\t\t\t\t[SchedTime],\n\t\t\t\t\t\t\t\t\t[SentTime],\n\t\t\t\t\t\t\t\t\t[Subject],\n\t\t\t\t\t\t\t\t\t[Emailname],\n\t\t\t\t\t\t\t\t\t[TriggeredSendExternalkey],\n\t\t\t\t\t\t\t\t\t[SendDefinitionExternalKey],\n\t\t\t\t\t\t\t\t\t[JobStatus],\n\t\t\t\t\t\t\t\t\t[PreviewURL],\n\t\t\t\t\t\t\t\t\t[IsMultipart],\n\t\t\t\t\t\t\t\t\t[Additional]\n\n\t\t\t\t\t\t\tORDER BY\n\t\t\t\t\t\t\t\t\t[ClientID],\n\t\t\t\t\t\t\t\t\t[SendID],\n\t\t\t\t\t\t\t\t\t[FromName],\n\t\t\t\t\t\t\t\t\t[FromEmail],\n\t\t\t\t\t\t\t\t\t[SchedTime],\n\t\t\t\t\t\t\t\t\t[SentTime],\n\t\t\t\t\t\t\t\t\t[Subject],\n\t\t\t\t\t\t\t\t\t[Emailname],\n\t\t\t\t\t\t\t\t\t[TriggeredSendExternalkey],\n\t\t\t\t\t\t\t\t\t[SendDefinitionExternalKey],\n\t\t\t\t\t\t\t\t\t[JobStatus],\n\t\t\t\t\t\t\t\t\t[PreviewURL],\n\t\t\t\t\t\t\t\t\t[IsMultipart],\n\t\t\t\t\t\t\t\t\t[Additional]\n\t\t\t\t\t\t) ROW_NUM\n\n\tFROM [Import].[EmailSendJobs]\n)\nDELETE FROM CTE\nWHERE ROW_NUM >1"
								}
							]
						}
					},
					{
						"name": "Sent file load",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "ClientID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ClientID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "SendID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SendID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "SubscriberKey",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SubscriberKey",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "EmailAddress",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "EmailAddress",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "SubscriberID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SubscriberID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ListID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ListID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "EventDate",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "EventDate",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "EventType",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "EventType",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "BatchID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "BatchID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "TriggeredSendExternalKey",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "TriggeredExternalKey",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CampaignID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CompaignID",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "src_sentFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "tgt_Sent",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Sent_xm file load",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "ClientID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ClientID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "SendID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SendID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "SubscriberKey",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SubscriberKey",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "EmailAddress",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "EmailAddress",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "SubscriberID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SubscriberID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ListID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ListID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "EventDate",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "EventDate",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "EventType",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "EventType",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "BatchID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "BatchID",
											"type": "Int32",
											"physicalType": "int"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "src_Sent_xm",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "tgt_Sent",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Remove Sent table duplicates",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Sent file load",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Sent_xm file load",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "LS_AzureSQLDB",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "With CTE AS\n(\n\tSELECT \n\t\t[ClientID],\n\t\t[SendID],\n\t\t[SubscriberKey],\n\t\t[EmailAddress],\n\t\t[SubscriberID],\n\t\t[ListID],\n\t\t[EventDate],\n\t\t[EventType],\n\t\t[BatchID],\n\t\t[TriggeredExternalKey],\n\t\t[CompaignID],\n\n\t\tROW_NUMBER() OVER(\n\t\t\t\t\t\t\tPARTITION BY\n\t\t\t\t\t\t\t\t\t[ClientID],\n\t\t\t\t\t\t\t\t\t[SendID],\n\t\t\t\t\t\t\t\t\t[SubscriberKey],\n\t\t\t\t\t\t\t\t\t[EmailAddress],\n\t\t\t\t\t\t\t\t\t[SubscriberID],\n\t\t\t\t\t\t\t\t\t[ListID],\n\t\t\t\t\t\t\t\t\t[EventDate],\n\t\t\t\t\t\t\t\t\t[EventType],\n\t\t\t\t\t\t\t\t\t[BatchID],\n\t\t\t\t\t\t\t\t\t[TriggeredExternalKey],\n\t\t\t\t\t\t\t\t\t[CompaignID]\n\n\t\t\t\t\t\t\tORDER BY\n\t\t\t\t\t\t\t\t\t[ClientID],\n\t\t\t\t\t\t\t\t\t[SendID],\n\t\t\t\t\t\t\t\t\t[SubscriberKey],\n\t\t\t\t\t\t\t\t\t[EmailAddress],\n\t\t\t\t\t\t\t\t\t[SubscriberID],\n\t\t\t\t\t\t\t\t\t[ListID],\n\t\t\t\t\t\t\t\t\t[EventDate],\n\t\t\t\t\t\t\t\t\t[EventType],\n\t\t\t\t\t\t\t\t\t[BatchID],\n\t\t\t\t\t\t\t\t\t[TriggeredExternalKey],\n\t\t\t\t\t\t\t\t\t[CompaignID]\n\t\t\t\t\t\t) ROW_NUM\n\n\tFROM [Import].[EmailSent]\n)\nDELETE FROM CTE\nWHERE ROW_NUM >1"
								}
							]
						}
					},
					{
						"name": "Bounces file load",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "ClientID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ClientID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "SendID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SendID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "SubscriberKey",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SubscriberKey",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "EmailAddress",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "EmailAddress",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "SubscriberID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SubscriberID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "ListID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ListID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "EventDate",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "EventDate",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "EventType",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "EventType",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "BounceCategory",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Bouncecategory",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "SMTPCode",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SMTPCode",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "BounceReason",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "BounceReason",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "BatchID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "BatchID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "TriggeredSendExternalKey",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "TriggeredSendExternalKey",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "src_bounces",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "tgt_bounces",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Click data load",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "src_clicks",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "tgt_clicks",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Click_xm data load",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "src_clicks_xm",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "tgt_clicks",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Remove clicks table duplicates",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Click_xm data load",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Click data load",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "LS_AzureSQLDB",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "With CTE AS\n(\n\tSELECT \n\t\t[ClientID],\n\t\t[SendID],\n\t\t[SubscriberKey],\n\t\t[EmailAddress],\n\t\t[SubscriberID],\n\t\t[ListID],\n\t\t[EventDate],\n\t\t[EventType],\n\t\t[SendURLID],\n\t\t[URLID],\n\t\t[URL],\n\t\t[Alias],\n\t\t[BatchID],\n\t\t[TriggeredSendExternalKey],\n\t\t[IsUnique],\n\n\t\tROW_NUMBER() OVER(\n\t\t\t\t\t\t\tPARTITION BY\n\t\t\t\t\t\t\t\t\t[ClientID],\n\t\t\t\t\t\t\t\t\t[SendID],\n\t\t\t\t\t\t\t\t\t[SubscriberKey],\n\t\t\t\t\t\t\t\t\t[EmailAddress],\n\t\t\t\t\t\t\t\t\t[SubscriberID],\n\t\t\t\t\t\t\t\t\t[ListID],\n\t\t\t\t\t\t\t\t\t[EventDate],\n\t\t\t\t\t\t\t\t\t[EventType],\n\t\t\t\t\t\t\t\t\t[SendURLID],\n\t\t\t\t\t\t\t\t\t[URLID],\n\t\t\t\t\t\t\t\t\t[URL],\n\t\t\t\t\t\t\t\t\t[Alias],\n\t\t\t\t\t\t\t\t\t[BatchID],\n\t\t\t\t\t\t\t\t\t[TriggeredSendExternalKey],\n\t\t\t\t\t\t\t\t\t[IsUnique]\n\n\t\t\t\t\t\t\tORDER BY\n\t\t\t\t\t\t\t\t\t[ClientID],\n\t\t\t\t\t\t\t\t\t[SendID],\n\t\t\t\t\t\t\t\t\t[SubscriberKey],\n\t\t\t\t\t\t\t\t\t[EmailAddress],\n\t\t\t\t\t\t\t\t\t[SubscriberID],\n\t\t\t\t\t\t\t\t\t[ListID],\n\t\t\t\t\t\t\t\t\t[EventDate],\n\t\t\t\t\t\t\t\t\t[EventType],\n\t\t\t\t\t\t\t\t\t[SendURLID],\n\t\t\t\t\t\t\t\t\t[URLID],\n\t\t\t\t\t\t\t\t\t[URL],\n\t\t\t\t\t\t\t\t\t[Alias],\n\t\t\t\t\t\t\t\t\t[BatchID],\n\t\t\t\t\t\t\t\t\t[TriggeredSendExternalKey],\n\t\t\t\t\t\t\t\t\t[IsUnique]\n\t\t\t\t\t\t) ROW_NUM\n\n\tFROM [Import].[EmailClicks]\n)\nDELETE FROM CTE\nWHERE ROW_NUM >1"
								}
							]
						}
					},
					{
						"name": "Opens file load",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "src_opens",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "tgt_opens",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Opens_xm file load",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "src_opens_xm",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "tgt_opens",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Complaints file load",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "ClientID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ClientID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "SendID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SendID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "SubscriberKey",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SubscriberKey",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "EmailAddress",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "EmailAddress",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "SubscriberID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SubscriberID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "ListID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ListID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "EventDate",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "EventDate",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "EventType",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "EventType",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "BatchID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "BatchID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "TriggeredSendExternalKey",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "TriggeredSendExternalKey",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Domain",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Domain",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "src_complaints",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "tgt_complaints",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Complaints_xm file load",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "src_complaints_xm",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "tgt_complaints",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Log CSV fail",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "List file load",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "List_xm file load",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "Attributes file load",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "Attributes_xm file load",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "SendJobs file load",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "SendJobs_xm file load",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "Sent file load",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "Sent_xm file load",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "Bounces file load",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "Click_xm data load",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "Click data load",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "Opens file load",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "Opens_xm file load",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "Complaints file load",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "Complaints_xm file load",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[LogProcessError]",
								"storedProcedureParameters": {
									"Param1": {
										"type": "String",
										"value": "See SSIS Log"
									},
									"ProcessId": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.ProcessId",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "logActivityFail",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Log Message",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Log CSV fail",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[sp_GetLogStatus]",
								"storedProcedureParameters": {
									"JobId": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.JobId",
											"type": "Expression"
										}
									},
									"LogType": {
										"type": "String",
										"value": "Job"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "getlogmessage",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Summary",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Log Message",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Summary",
							"value": {
								"value": "@activity('Get Log Message').output.value[0].Summary",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Push Slacvk Notfication",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Summary",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Icon",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://hooks.slack.com/services/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",
							"method": "POST",
							"headers": {
								"Content-Type": "text/plain"
							},
							"body": {
								"value": "@concat('{\n    \"text\": \"', variables('Summary'),variables('Icon'), '\"\n}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Remove opens table duplicates",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Opens file load",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Opens_xm file load",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "LS_AzureSQLDB",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "With CTE AS\n(\n\tSELECT \n\t\t[ClientID],\n\t\t[SendID],\n\t\t[SubscriberKey],\n\t\t[EmailAddress],\n\t\t[SubscriberID],\n\t\t[ListID],\n\t\t[EventDate],\n\t\t[EventType],\n\t\t[BatchID],\n\t\t[TriggeredSendExternalKey],\n\t\t[IsUnique],\n\n\t\tROW_NUMBER() OVER(\n\t\t\t\t\t\t\tPARTITION BY\n\t\t\t\t\t\t\t\t\t[ClientID],\n\t\t\t\t\t\t\t\t\t[SendID],\n\t\t\t\t\t\t\t\t\t[SubscriberKey],\n\t\t\t\t\t\t\t\t\t[EmailAddress],\n\t\t\t\t\t\t\t\t\t[SubscriberID],\n\t\t\t\t\t\t\t\t\t[ListID],\n\t\t\t\t\t\t\t\t\t[EventDate],\n\t\t\t\t\t\t\t\t\t[EventType],\n\t\t\t\t\t\t\t\t\t[BatchID],\n\t\t\t\t\t\t\t\t\t[TriggeredSendExternalKey],\n\t\t\t\t\t\t\t\t\t[IsUnique]\n\n\t\t\t\t\t\t\tORDER BY\n\t\t\t\t\t\t\t\t\t[ClientID],\n\t\t\t\t\t\t\t\t\t[SendID],\n\t\t\t\t\t\t\t\t\t[SubscriberKey],\n\t\t\t\t\t\t\t\t\t[EmailAddress],\n\t\t\t\t\t\t\t\t\t[SubscriberID],\n\t\t\t\t\t\t\t\t\t[ListID],\n\t\t\t\t\t\t\t\t\t[EventDate],\n\t\t\t\t\t\t\t\t\t[EventType],\n\t\t\t\t\t\t\t\t\t[BatchID],\n\t\t\t\t\t\t\t\t\t[TriggeredSendExternalKey],\n\t\t\t\t\t\t\t\t\t[IsUnique]\n\t\t\t\t\t\t) ROW_NUM\n\n\tFROM [Import].[EmailOpens]\n)\nDELETE FROM CTE\nWHERE ROW_NUM >1"
								}
							]
						}
					},
					{
						"name": "Remove Compliants table duplicates",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Complaints file load",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Complaints_xm file load",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "LS_AzureSQLDB",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "With CTE AS\n(\n\tSELECT \n\t\t[ClientID],\n\t\t[SendID],\n\t\t[SubscriberKey],\n\t\t[EmailAddress],\n\t\t[SubscriberID],\n\t\t[ListID],\n\t\t[EventDate],\n\t\t[EventType],\n\t\t[BatchID],\n\t\t[TriggeredSendExternalKey],\n\t\t[Domain],\n\n\t\tROW_NUMBER() OVER(\n\t\t\t\t\t\t\tPARTITION BY\n\t\t\t\t\t\t\t\t\t[ClientID],\n\t\t\t\t\t\t\t\t\t[SendID],\n\t\t\t\t\t\t\t\t\t[SubscriberKey],\n\t\t\t\t\t\t\t\t\t[EmailAddress],\n\t\t\t\t\t\t\t\t\t[SubscriberID],\n\t\t\t\t\t\t\t\t\t[ListID],\n\t\t\t\t\t\t\t\t\t[EventDate],\n\t\t\t\t\t\t\t\t\t[EventType],\n\t\t\t\t\t\t\t\t\t[BatchID],\n\t\t\t\t\t\t\t\t\t[TriggeredSendExternalKey],\n\t\t\t\t\t\t\t\t\t[Domain]\n\n\t\t\t\t\t\t\tORDER BY\n\t\t\t\t\t\t\t\t\t[ClientID],\n\t\t\t\t\t\t\t\t\t[SendID],\n\t\t\t\t\t\t\t\t\t[SubscriberKey],\n\t\t\t\t\t\t\t\t\t[EmailAddress],\n\t\t\t\t\t\t\t\t\t[SubscriberID],\n\t\t\t\t\t\t\t\t\t[ListID],\n\t\t\t\t\t\t\t\t\t[EventDate],\n\t\t\t\t\t\t\t\t\t[EventType],\n\t\t\t\t\t\t\t\t\t[BatchID],\n\t\t\t\t\t\t\t\t\t[TriggeredSendExternalKey],\n\t\t\t\t\t\t\t\t\t[Domain]\n\t\t\t\t\t\t) ROW_NUM\n\n\tFROM [Import].[EmailComplaints]\n)\nDELETE FROM CTE\nWHERE ROW_NUM >1"
								}
							]
						}
					},
					{
						"name": "Log Process end",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Remove Email list table Duplicates",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Remove Atrributes table duplicates",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Remove SendJobs table duplicates",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Remove Sent table duplicates",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Remove clicks table duplicates",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Remove opens table duplicates",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Remove Compliants table duplicates",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[LogProcessEnd]",
								"storedProcedureParameters": {
									"ProcessId": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.ProcessId",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "src_logprocessend",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Icon",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Log Message",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Icon",
							"value": {
								"value": "@activity('Get Log Message').output.value[0].Icon",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"ProcessId": {
						"type": "string"
					},
					"JobId": {
						"type": "string"
					}
				},
				"variables": {
					"Summary": {
						"type": "String"
					},
					"Icon": {
						"type": "String"
					},
					"JobId": {
						"type": "String",
						"defaultValue": "1"
					},
					"ProcessId": {
						"type": "String",
						"defaultValue": "1"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-09-09T14:12:39Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/tgt_ListFileLoad')]",
				"[concat(variables('factoryId'), '/datasets/tgt_attributes')]",
				"[concat(variables('factoryId'), '/datasets/tgt_SendJobs')]",
				"[concat(variables('factoryId'), '/datasets/tgt_Sent')]",
				"[concat(variables('factoryId'), '/datasets/tgt_bounces')]",
				"[concat(variables('factoryId'), '/datasets/tgt_clicks')]",
				"[concat(variables('factoryId'), '/datasets/tgt_opens')]",
				"[concat(variables('factoryId'), '/datasets/tgt_complaints')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Child Income Access Sp Exec')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "EXEC sp_Merchant",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[sp_Merchant]",
								"storedProcedureParameters": {
									"JobId": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.JobId",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "EXEC_sp_Merchant",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "EXEC sp_SiteEarning",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "EXEC sp_Merchant",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[sp_SiteEarning]",
								"storedProcedureParameters": {
									"JobId": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.JobId",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "EXEC_sp_SiteEarning",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "EXEC sp_ACIDReport",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "EXEC sp_PlayerAccount",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[sp_ACIDReport]",
								"storedProcedureParameters": {
									"JobId": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.JobId",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "EXEC_sp_ACIDReport",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Immediate VIP RBC Statuses",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Merchant Campaign IDs",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[sp_VipRbcStatusForToday]",
								"storedProcedureParameters": {
									"JobId": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.JobId",
											"type": "Expression"
										}
									},
									"PlatformId": {
										"type": "String",
										"value": {
											"value": "@variables('PlatformId')",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Immediate_VIP_RBC_Statuses",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Assign Hosts",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Immediate VIP RBC Statuses",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[sp_AssignVIPs]",
								"storedProcedureParameters": {
									"JobId": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.JobId",
											"type": "Expression"
										}
									},
									"PlatformId": {
										"type": "String",
										"value": {
											"value": "@variables('PlatformId')",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Assign_Hosts",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "sp_SetIncomeAccessEtlPartitionsDirty",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Assign Hosts",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[sp_SetIncomeAccessEtlPartitionsDirty]",
								"storedProcedureParameters": {
									"JobId": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.JobId",
											"type": "Expression"
										}
									},
									"PlatformId": {
										"type": "String",
										"value": {
											"value": "@variables('PlatformId')",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "sp_SetIncomeAccessEtlPartitionsDirty",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Materialise Marketing Costs",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "IA Tracking",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[sp_MarketingCosts]",
								"storedProcedureParameters": {
									"JobId": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.JobId",
											"type": "Expression"
										}
									},
									"LoadDate": {
										"type": "DateTime",
										"value": {
											"value": "@pipeline().parameters.SetDate",
											"type": "Expression"
										}
									},
									"StartDate": {
										"type": "DateTime",
										"value": null
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Materialise_Marketing_Costs",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "IA Tracking",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "sp_SetIncomeAccessEtlPartitionsDirty",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[sp_MtdSweepIA]",
								"storedProcedureParameters": {
									"Date": {
										"type": "DateTime",
										"value": {
											"value": "@pipeline().parameters.SetDate",
											"type": "Expression"
										}
									},
									"JobId": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.JobId",
											"type": "Expression"
										}
									},
									"processName": {
										"type": "String",
										"value": "Sweep"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "IA_Tracking",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Assign Repayment Cohorts",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Materialise Marketing Costs",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[sp_AssignAcqCohort]",
								"storedProcedureParameters": {
									"Date": {
										"type": "DateTime",
										"value": {
											"value": "@pipeline().parameters.SetDate",
											"type": "Expression"
										}
									},
									"JobId": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.JobId",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Assign_Repayment_Cohorts",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Repayment Status",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Assign Repayment Cohorts",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[sp_RepaymentStatus]",
								"storedProcedureParameters": {
									"Date": {
										"type": "DateTime",
										"value": {
											"value": "@pipeline().parameters.SetDate",
											"type": "Expression"
										}
									},
									"JobId": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.JobId",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "sp_RepaymentStatus",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Update RepaymentTrackingId",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get Repayment Status",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[sp_MarketingCosts_RepaymentTrk]",
								"storedProcedureParameters": {
									"JobId": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.JobId",
											"type": "Expression"
										}
									},
									"LoadDate": {
										"type": "DateTime",
										"value": {
											"value": "@pipeline().parameters.SetDate",
											"type": "Expression"
										}
									},
									"StartDate": {
										"type": "DateTime",
										"value": null
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Update_RepaymentTrackingId",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Affiliate and Parent Spend",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Update RepaymentTrackingId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[sp_CalculateLatestAffSpend]",
								"storedProcedureParameters": {
									"JobId": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.JobId",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Affiliate_and_Parent_Spend",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Validation Summary Check",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Affiliate and Parent Spend",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[sp_ValidationSummaryCheck]",
								"storedProcedureParameters": {
									"JobId": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.JobId",
											"type": "Expression"
										}
									},
									"param1": {
										"type": "String",
										"value": "0"
									},
									"param2": {
										"type": "String",
										"value": null
									},
									"param3": {
										"type": "String",
										"value": null
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Validation_Summary_Check",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Log_Package_End",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Validation Summary Check",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[LogJobEnd]",
								"storedProcedureParameters": {
									"jobId": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.JobId",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Log_Package_End",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "get log message",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Log_Package_End",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[sp_GetLogStatus]",
								"storedProcedureParameters": {
									"JobId": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.JobId",
											"type": "Expression"
										}
									},
									"LogType": {
										"type": "String",
										"value": "Job"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "get_log_message",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Set Summary",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "get log message",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Summary",
							"value": {
								"value": "@activity('get log message').output.value[0].Summary",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Icon",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "get log message",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Icon",
							"value": {
								"value": "@activity('get log message').output.value[0].Icon",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Push Slack Notification",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Set Summary",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set Icon",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://hooks.slack.com/services/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",
							"method": "POST",
							"headers": {
								"Content-Type": "text/plain"
							},
							"body": {
								"value": "@concat('{\n    \"text\": \"', variables('Summary'),variables('Icon'), '\"\n}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "EXEC sp_PlayerAccount",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "EXEC sp_SiteEarning",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[sp_PlayerAccount]",
								"storedProcedureParameters": {
									"JobId": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.JobId",
											"type": "Expression"
										}
									},
									"PlatformId": {
										"type": "String",
										"value": {
											"value": "@variables('PlatformId')",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "EXEC_sp_PlayerAccount",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Merchant Campaign IDs",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "EXEC sp_ACIDReport",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[sp_UpdateMerchantCampaignIds]",
								"storedProcedureParameters": {
									"Date": {
										"type": "DateTime",
										"value": {
											"value": "@pipeline().parameters.SetDate",
											"type": "Expression"
										}
									},
									"JobId": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.JobId",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "sp_Merchant_Campaign_IDs",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"JobId": {
						"type": "string"
					},
					"SetDate": {
						"type": "string"
					}
				},
				"variables": {
					"Summary": {
						"type": "String"
					},
					"Icon": {
						"type": "String"
					},
					"PlatformId": {
						"type": "String",
						"defaultValue": "1"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-10-06T14:15:13Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Child Income Access')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Foreach Brand In Player Account Date",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.BrandList_PA",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Get Player Account Arg",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Set Brand",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('DECLARE DateStr VARCHAR(10) = ','''',pipeline().parameters.CurrentDate,'''',',',\n' ContainerParam VARCHAR(100) =','''', pipeline().parameters.BlobContainerIncomeAccess,'''',',',\n' RayGunKey VARCHAR(100) = ','''',pipeline().parameters.RayGunApiKey,'''',',',\n' BrandId VARCHAR(100) =','''',variables('Brand'),'''',',',\n' AccountName VARCHAR(100) =','''', pipeline().parameters.BlobStorageAccountName,'''',',',\n' AccountKey VARCHAR(1024) =','''', pipeline().parameters.BlobStorageAccountKey,'''',\n\n'SELECT ''/C '' + \n\tREPLACE(REPLACE(REPLACE(REPLACE(ArgumentText, ''DateParam'', DateStr), ''AccountName'', AccountName), ''AccountKey'', AccountKey), ''ContainerParam'', ContainerParam) + '' '' + RayGunKey ArgumentText \nFROM config.IncomeAccessFeed \nWHERE FeedType = ''Player Account''\nAND Brand = BrandId\n')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "GetPlayerAccountArg",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "Get Site Earnings Arg",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Populate Import Player Account",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('DECLARE DateStr VARCHAR(10) = ','''',pipeline().parameters.CurrentDate,'''',',',\n' ContainerParam VARCHAR(100) =','''', pipeline().parameters.BlobContainerIncomeAccess,'''',',',\n' RayGunKey VARCHAR(100) = ','''',pipeline().parameters.RayGunApiKey,'''',',',\n' BrandId VARCHAR(100) =','''', item(),'''',',',\n' AccountName VARCHAR(100) =','''', pipeline().parameters.BlobStorageAccountName,'''',',',\n' AccountKey VARCHAR(1024) =','''', pipeline().parameters.BlobStorageAccountKey,'''',\n\n'SELECT ''/C '' + \n\tREPLACE(REPLACE(REPLACE(REPLACE(ArgumentText, ''DateParam'', DateStr), ''AccountName'', AccountName), ''AccountKey'', AccountKey), ''ContainerParam'', ContainerParam) + '' '' + RayGunKey ArgumentText \nFROM config.IncomeAccessFeed \nWHERE FeedType = ''Earnings By Site''\nAND Brand = BrandId\n')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "GetSiteEarningsArg",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "Set Current File",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Get Player Account Arg",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "CurrentFile",
										"value": {
											"value": "@concat('incomeaccess_playeraccounts_',item(),'_',formatDateTime(utcnow(),'yyyyMMdd'),'.csv'\n)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Populate Import Player Account",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set Current File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"additionalColumns": [
												{
													"name": "Date",
													"value": {
														"value": "@formatDateTime(utcnow(),'dd/MM/yyyy')",
														"type": "Expression"
													}
												}
											],
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "Date",
														"type": "String"
													},
													"sink": {
														"name": "Date",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "rowid",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "RowId",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "Currency Symbol",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "CurrencySymbol",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "Total Records",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "TotalRecords",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "MerchantID",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "MerchantId",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "Merchant",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "MerchantName",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "Username",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "UserName",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "Site ID",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "SiteId",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "Creative Name",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "CreativeName",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "Player ID",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "PlayerId",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "Registration Date",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "RegistrationDate",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "First Deposit",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "FirstDeposit",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "CPA Commission",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "TotalCpaCommission",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "CPA count",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "CpaCommissionCount",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "Total Commission",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "TotalCommission",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "New",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "New",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "Net revenue",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "NetRevenue",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "LastClickReferralURL",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "LastClickReferralURL",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "LastClickIP",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "LastClickIP",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "LastClickCountry",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "LastClickCountry",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "Deposits",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "Deposits",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 2,
														"precision": 12
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "src_importPlayerAccount",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "tgt_PlayerAccount",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Populate Import_SiteEarning",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set Site Earning File name",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"additionalColumns": [
												{
													"name": "Date",
													"value": {
														"value": "@formatDateTime(utcnow(),'dd/MM/yyyy')",
														"type": "Expression"
													}
												}
											],
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "Date",
														"type": "String"
													},
													"sink": {
														"name": "Date",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												},
												{
													"source": {
														"name": "rowid",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "RowId",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "Currency Symbol",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "CurrencySymbol",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "Total Records",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "TotalRecords",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "MerchantID",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "MerchantId",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "Merchant",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "MerchantName",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "Site ID",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "SiteId",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "Site Name",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "SiteName",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "Username",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "UserName",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "Country",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "Country",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "Impressions",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "Impressions",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "Clicks",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "Clicks",
														"type": "String",
														"physicalType": "varchar"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "src_ImportSiteEarning",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "tgt_ImportSiteEarning",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Set Site Earning File name",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Get Site Earnings Arg",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "SiteEarningCsvFileName",
										"value": {
											"value": "@concat('incomeaccess_earnings_bysite_',item(),'_',formatDateTime(utcnow(),'yyyyMMdd'),'.csv'\n)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set Failed File Name",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Populate Import Player Account",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "FailCsvFileName",
										"value": {
											"value": "@variables('CurrentFile')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set Failed CSV File Name",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Populate Import_SiteEarning",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "FailCsvFileName",
										"value": {
											"value": "@variables('SiteEarningCsvFileName')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set Brand",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "Brand",
										"value": {
											"value": "@{item().Brand}",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Log CSV Fail",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Foreach Brand In Player Account Date",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[LogProcessError]",
								"storedProcedureParameters": {
									"Param1": {
										"type": "String",
										"value": {
											"value": "@variables('FailCsvFileName')",
											"type": "Expression"
										}
									},
									"ProcessId": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.ProcessId_PA",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "src_LogCsvFail",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Log CSV import end",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Foreach Brand In Player Account Date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[LogProcessEnd]",
								"storedProcedureParameters": {
									"ProcessId": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.ProcessId_PA",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "src_LogCsvImportEnd",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"ProcessId_PA": {
						"type": "string"
					},
					"CurrentDate": {
						"type": "string"
					},
					"BlobContainerIncomeAccess": {
						"type": "string",
						"defaultValue": "incomeaccess"
					},
					"BlobStorageAccountKey": {
						"type": "string"
					},
					"BlobStorageAccountName": {
						"type": "string"
					},
					"BlobStorageContainer": {
						"type": "string",
						"defaultValue": "a"
					},
					"RayGunApiKey": {
						"type": "string"
					},
					"Brand_PA": {
						"type": "string"
					},
					"Brand": {
						"type": "string"
					},
					"BrandList_PA": {
						"type": "array"
					}
				},
				"variables": {
					"CurrentFile": {
						"type": "String"
					},
					"SiteEarningCsvFileName": {
						"type": "String"
					},
					"FailCsvFileName": {
						"type": "String"
					},
					"Brand": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-10-06T12:18:53Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/tgt_PlayerAccount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Ppc Costs SSIS to ADF')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "PPC Keywords",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Truncate table script",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:02:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "srcPPCKeyword",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "tgtPPCKeywords",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "PPC Costs",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Truncate table script",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:02:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "srcPPCCost",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "tgtPPCCost",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "PPC Cost MountMedia",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Truncate table script",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:02:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "srcPPCCostMountMedia",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "tgtPPCCostMountMedia",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Ppc Player MountMedia",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Truncate table script",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:02:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "PpcChannel",
										"value": "Adwords"
									}
								],
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "No Records",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "No Records",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Match Type",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Match Type",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Device",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Device",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Keyword",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Keyword",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Account",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Account",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "End Date ",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "End Date ",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Start Date",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Start Date",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SrcPpcPlayerMountMedia",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "TgtPpcPlayerMountMedia",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Log CSV import end",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "PPC Keywords",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "PPC Costs",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "PPC Cost MountMedia",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "TradeSureCosts",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "TradeSurge Player",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "Ppc Player MountMedia",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "WhiteZippcplayers",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "WhiteZipppccosts",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[LogProcessEnd]",
							"storedProcedureParameters": {
								"ProcessId": {
									"value": {
										"value": "@variables('ProcessId')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_AzureSQLDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Log Csv Fail",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Error message",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Skipped"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[LogProcessError]",
							"storedProcedureParameters": {
								"Param1": {
									"value": "See Azure data factory Log",
									"type": "String"
								},
								"ProcessId": {
									"value": {
										"value": "@variables('ProcessId')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_AzureSQLDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "TradeSureCosts",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Truncate table script",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:02:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "srcTradeSurge",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "tgtTradeSurgeCosts",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "TradeSurge Player",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Truncate table script",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:02:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "srcTradeSurgePlayer",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "tgtTradeSurgePlayer",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Slack notification",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get Error Icon",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Get Error Summary",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://hooks.slack.com/services/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",
							"method": "POST",
							"headers": {
								"Content-type": "application/json"
							},
							"body": {
								"value": "@concat('{\n    \"text\": \" ', variables('Summary'),variables('Icon'), '\"\n}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Truncate table script",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Set ProcessId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "LS_AzureSQLDB",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "TRUNCATE TABLE import.PpcKeyword;\nTRUNCATE TABLE import.PpcCost;\nTRUNCATE TABLE import.PpcCost_MountMedia;\nTRUNCATE TABLE import.AggregatorSiteCost;\nTRUNCATE TABLE import.AggregatorSitePlayer;"
								}
							]
						}
					},
					{
						"name": "PPC keyword",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "PPC Cost",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_PpcKeyword]",
							"storedProcedureParameters": {
								"jobId": {
									"value": {
										"value": "@pipeline().parameters.JobId",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_AzureSQLDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "PPC Cost",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Allocate PPC Cost",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_PpcCost]",
							"storedProcedureParameters": {
								"jobId": {
									"value": {
										"value": "@pipeline().parameters.JobId",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_AzureSQLDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Allocate PPC Cost",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Log CSV import end",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Slack notification",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_AllocatePpcCosts]",
							"storedProcedureParameters": {
								"jobId": {
									"value": {
										"value": "@pipeline().parameters.JobId",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_AzureSQLDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Log Messages",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "PPC keyword",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_GetLogStatus]",
							"storedProcedureParameters": {
								"JobId": {
									"value": {
										"value": "@pipeline().parameters.JobId",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"LogType": {
									"value": "Job",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_AzureSQLDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Slack notifications",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get Log Messages",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://hooks.slack.com/services/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",
							"method": "POST",
							"headers": {
								"Content-type": "application/json"
							},
							"body": {
								"value": "@concat('{\n    \"text\": \"', variables('Summary'),variables('Icon'), '\"\n}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Match Type Derived Column",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Ppc Player MountMedia",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "LS_AzureSQLDB",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "update import.PpcCost_MountMedia\nset [Match Type]= left([Match Type],1);\n"
								}
							]
						}
					},
					{
						"name": "Log Csv Import",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "List Of Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[LogProcess]",
								"storedProcedureParameters": {
									"JobId": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.JobId",
											"type": "Expression"
										}
									},
									"ModifiedBy": {
										"type": "String",
										"value": "tom@mail.com"
									},
									"ProcessName": {
										"type": "String",
										"value": "Import CSVs"
									},
									"ProcessParams": {
										"type": "String",
										"value": null
									},
									"ProcessStatus": {
										"type": "String",
										"value": "Started"
									},
									"ProcessType": {
										"type": "String",
										"value": "SSIS Dataflow"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQL_Scripts_dataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Set ProcessId",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Log Csv Import",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ProcessId",
							"value": {
								"value": "@{activity('Log Csv Import').output.value[0].ProcessId}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup File MetaData",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set Job Id",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT   [FileId]\n      ,[FileToDownload]\n      ,ISNULL([Path],'') as Path\n      ,[FileColumnHeaders]\n      ,[BlobContainer]\n      ,[Mandatory]\nFROM [dbo].[SSIS_Metadata]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "FilesMetaData",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "List Of Files",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup File MetaData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup File MetaData').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Get File Metadata",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "srcCSVFile",
											"type": "DatasetReference",
											"parameters": {
												"BlobContainer": {
													"value": "@item().BlobContainer",
													"type": "Expression"
												},
												"Path": {
													"value": "@item().Path",
													"type": "Expression"
												},
												"File": {
													"value": "@concat(item().FileToDownload,'_',replace(variables('FileDate'),'-',''),'.csv')",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"exists"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "Check If Exists",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Get File Metadata",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@activity('Get File Metadata').output.exists",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Log Missing File",
												"type": "Script",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"linkedServiceName": {
													"referenceName": "LS_AzureSQLDB",
													"type": "LinkedServiceReference"
												},
												"typeProperties": {
													"scripts": [
														{
															"type": "Query",
															"text": {
																"value": "@concat('INSERT INTO log.MissingFile (JobId, MissingFilename,MissingTimestamp,IsMandatory)\nVALUES (',pipeline().parameters.JobId,',''',item().BlobContainer,'/',item().Path,'/',item().FileToDownload,formatDateTime(adddays(utcnow(),-1),'_yyyyMMdd'),'.csv'',''',formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss'),''',''',item().Mandatory,''')')",
																"type": "Expression"
															}
														}
													]
												}
											},
											{
												"name": "Get Log Message",
												"type": "Lookup",
												"dependsOn": [
													{
														"activity": "Log Missing File",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderStoredProcedureName": "[[dbo].[sp_GetLogStatus]",
														"storedProcedureParameters": {
															"JobId": {
																"type": "Int32",
																"value": {
																	"value": "@pipeline().parameters.JobId",
																	"type": "Expression"
																}
															},
															"LogType": {
																"type": "String",
																"value": "Missing File"
															}
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "sp_GetLogStatus",
														"type": "DatasetReference",
														"parameters": {}
													},
													"firstRowOnly": false
												}
											},
											{
												"name": "Push slack Notification",
												"type": "WebActivity",
												"dependsOn": [
													{
														"activity": "Get Summary",
														"dependencyConditions": [
															"Succeeded"
														]
													},
													{
														"activity": "Get Icon",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"url": "https://hooks.slack.com/services/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",
													"method": "POST",
													"headers": {
														"Content-type": "text/plain"
													},
													"body": {
														"value": "@concat('{\n    \"text\": \"', variables('Summary'),variables('Icon'), '\"\n}')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "Get Summary",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "Get Log Message",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "Summary",
													"value": {
														"value": "@activity('Get Log Message').output.value[0].Summary",
														"type": "Expression"
													}
												}
											},
											{
												"name": "Get Icon",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "Get Log Message",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "Icon",
													"value": {
														"value": "@activity('Get Log Message').output.value[0].Icon",
														"type": "Expression"
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Error message",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "PPC Keywords",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "PPC Costs",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "PPC Cost MountMedia",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "TradeSureCosts",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "TradeSurge Player",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "Ppc Player MountMedia",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "WhiteZipppccosts",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "WhiteZippcplayers",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ErrorMsg",
							"value": {
								"value": "@concat(activity('PPC Keywords').error?.message,'^|',activity('PPC Costs')?.error?.message,'^|',activity('PPC Cost MountMedia')?.error?.message,'^|',activity('TradeSureCosts')?.error?.message,'^|',activity('TradeSurge Player')?.error?.message,'^|',activity('Ppc Player MountMedia')?.error?.message)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "PPC Keywords",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "PPC Costs",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "PPC Cost MountMedia",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "TradeSureCosts",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "TradeSurge Player",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "Ppc Player MountMedia",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "WhiteZipppccosts",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "WhiteZippcplayers",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "Get Error Summary",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Log Mesage",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Summary",
							"value": {
								"value": "@variables('ErrorMsg')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get Error Icon",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Log Mesage",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Icon",
							"value": {
								"value": "@activity('Get Log Mesage').output.value[0].Icon",
								"type": "Expression"
							}
						}
					},
					{
						"name": "WhiteZipppccosts",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Truncate table script",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "srcWhiteZipppccosts",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "tgtWhiteZipppccosts",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "WhiteZippcplayers",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Truncate table script",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "src_WhiteZipppcplayer",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "tgt_WhiteZippcPlayer",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Get Log Mesage",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Log Csv Fail",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[sp_GetLogStatus]",
								"storedProcedureParameters": {
									"JobId": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.JobId",
											"type": "Expression"
										}
									},
									"LogType": {
										"type": "String",
										"value": "Job"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SrcspGetLogError",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Set date",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "SetDate",
							"value": {
								"value": "@formatDateTime(concat(formatDateTime(utcnow(),'MM/dd/yyyy'),' 12:00:00'), 'MM/dd/yyyy HH:mm:ss')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Log Start",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set date",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set File Date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[LogJob]",
								"storedProcedureParameters": {
									"JobName": {
										"type": "String",
										"value": {
											"value": "@variables('PackageDescr')",
											"type": "Expression"
										}
									},
									"JobParams": {
										"type": "String",
										"value": {
											"value": "@concat('Load Date = ',formatDateTime(variables('Setdate'),'dd/MM/yyyy'))",
											"type": "Expression"
										}
									},
									"JobStatus": {
										"type": "String",
										"value": "Started"
									},
									"ModifiedBy": {
										"type": "String",
										"value": "tomjones@mail.com"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SpLogJobId",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Job Id",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Log Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "JobId",
							"value": {
								"value": "@{activity('Log Start').output.firstRow.JobId}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set File Date",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "FileDate",
							"value": {
								"value": "@formatDateTime(utcnow(),'yyyy-MM-dd')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"JobId": {
						"type": "string"
					}
				},
				"variables": {
					"Summary": {
						"type": "String"
					},
					"Icon": {
						"type": "String"
					},
					"ProcessId": {
						"type": "String",
						"defaultValue": "0"
					},
					"ErrorMsg": {
						"type": "String"
					},
					"ErrorMsgAry": {
						"type": "Array"
					},
					"SetDate": {
						"type": "String"
					},
					"PackageDescr": {
						"type": "String"
					},
					"JobId": {
						"type": "String"
					},
					"FileDate": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-09-27T11:58:35Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/tgt_WhiteZippcPlayer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Email Compaign')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Log Start",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[LogJob]",
								"storedProcedureParameters": {
									"JobName": {
										"type": "String",
										"value": {
											"value": "@variables('PackageDescr')",
											"type": "Expression"
										}
									},
									"JobParams": {
										"type": "String",
										"value": {
											"value": "@concat('Load Date = ',formatDateTime(variables('Setdate'),'dd/MM/yyyy'))",
											"type": "Expression"
										}
									},
									"JobStatus": {
										"type": "String",
										"value": "Started"
									},
									"ModifiedBy": {
										"type": "String",
										"value": "tomjones@mail.com"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SpLogJobId",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Job Id",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Log Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "JobId",
							"value": {
								"value": "@{activity('Log Start').output.firstRow.JobId}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Log File Download",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set Job Id",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[LogProcess]",
								"storedProcedureParameters": {
									"JobId": {
										"type": "Int32",
										"value": {
											"value": "@variables('JobId')",
											"type": "Expression"
										}
									},
									"ModifiedBy": {
										"type": "String",
										"value": "Tomjones@gmail.com"
									},
									"ProcessName": {
										"type": "String",
										"value": "Check if CSVs exist"
									},
									"ProcessParams": {
										"type": "String",
										"value": null
									},
									"ProcessStatus": {
										"type": "String",
										"value": "Started"
									},
									"ProcessType": {
										"type": "String",
										"value": "Blob File Existence Verification"
									},
									"ShowResult": {
										"type": "Boolean",
										"value": {
											"value": "@variables('ShowResult')",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "LogFileDownload",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Process Id",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Log File Download",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ProcessId",
							"value": {
								"value": "@{activity('Log File Download').output.firstRow.ProcessId}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "For Each Loop Container",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ForEach Collection Lookup",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ForEach Collection Lookup').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Get Metadata1",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "src_fileMetadata",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@item().BlobStorageContainer1",
													"type": "Expression"
												},
												"File": {
													"value": "@concat(item().FileToDownload,'_',formatDateTime(variables('FileDate'),'yyyyMMdd'),'.csv')",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"exists"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "if file exists",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Get Metadata1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@activity('Get Metadata1').output.exists",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "log Missing File",
												"type": "Script",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"linkedServiceName": {
													"referenceName": "LS_AzureSQLDB",
													"type": "LinkedServiceReference"
												},
												"typeProperties": {
													"scripts": [
														{
															"type": "Query",
															"text": {
																"value": "@concat('INSERT INTO log.MissingFile (JobId, MissingFilename,MissingTimestamp,IsMandatory)\nVALUES (',variables('JobId'),',''',item().FileToDownload,formatDateTime(adddays(utcnow(),-1),'_yyyyMMdd'),'.csv'',''',formatDateTime(utcnow(),'yyyy-MM-dd hh:mm:ss'),''',''',''')')",
																"type": "Expression"
															}
														}
													]
												}
											},
											{
												"name": "Get Log Message",
												"type": "Lookup",
												"dependsOn": [
													{
														"activity": "log Missing File",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderStoredProcedureName": "[[dbo].[sp_GetLogStatus]",
														"storedProcedureParameters": {
															"JobId": {
																"type": "Int32",
																"value": {
																	"value": "@variables('JobId')",
																	"type": "Expression"
																}
															},
															"LogType": {
																"type": "String",
																"value": "Missing File"
															}
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "LogMessage",
														"type": "DatasetReference",
														"parameters": {}
													},
													"firstRowOnly": false
												}
											},
											{
												"name": "Summary",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "Get Log Message",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "Summary",
													"value": {
														"value": "@activity('Get Log Message').output.value[0].Summary",
														"type": "Expression"
													}
												}
											},
											{
												"name": "Icon",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "Get Log Message",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "Icon",
													"value": {
														"value": "@activity('Get Log Message').output.value[0].Icon",
														"type": "Expression"
													}
												}
											},
											{
												"name": "Slack Notification",
												"type": "WebActivity",
												"dependsOn": [
													{
														"activity": "Summary",
														"dependencyConditions": [
															"Succeeded"
														]
													},
													{
														"activity": "Icon",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"url": "https://hooks.slack.com/services/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",
													"method": "POST",
													"headers": {
														"content-type": "text/plain"
													},
													"body": {
														"value": "@concat('{\n    \"text\": \"', variables('Summary'),variables('Icon'), '\"\n}')",
														"type": "Expression"
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Log process End",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "For Each Loop Container",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[LogProcessEnd]",
								"storedProcedureParameters": {
									"ProcessId": {
										"type": "Int32",
										"value": {
											"value": "@variables('ProcessId')",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "LogProcessEnd",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Truncate table",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Log process End",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "LS_AzureSQLDB",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "TRUNCATE TABLE import.EmailList\nTRUNCATE TABLE import.EmailAttributes\nTRUNCATE TABLE import.EmailSendJobs\nTRUNCATE TABLE import.EmailSent\nTRUNCATE TABLE import.EmailBounces\nTRUNCATE TABLE import.EmailClicks\nTRUNCATE TABLE import.EmailOpens\nTRUNCATE TABLE import.EmailComplaints\n"
								}
							]
						}
					},
					{
						"name": "Log CSV Import",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Truncate table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[LogProcess]",
								"storedProcedureParameters": {
									"JobId": {
										"type": "Int32",
										"value": {
											"value": "@variables('JobId')",
											"type": "Expression"
										}
									},
									"ModifiedBy": {
										"type": "String",
										"value": "tomjones@gmail.com"
									},
									"ProcessName": {
										"type": "String",
										"value": "Import CSVs"
									},
									"ProcessParams": {
										"type": "String",
										"value": null
									},
									"ProcessStatus": {
										"type": "String",
										"value": "Started"
									},
									"ProcessType": {
										"type": "String",
										"value": "SSIS Dataflow"
									},
									"ShowResult": {
										"type": "Boolean",
										"value": {
											"value": "@variables('ShowResult')",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "LogCSVImport",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Process Id",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Log CSV Import",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ProcessId",
							"value": {
								"value": "@{activity('Log CSV Import').output.firstRow.ProcessId}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Email Compaign",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Execute Pipeline2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[sp_EmailCampaigns]",
								"storedProcedureParameters": {
									"Jobdate": {
										"type": "DateTime",
										"value": {
											"value": "@variables('Date')",
											"type": "Expression"
										}
									},
									"JobId": {
										"type": "Int32",
										"value": {
											"value": "@variables('JobId')",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "src_emailcompaign",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Log Job End",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Email Compaign",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[LogJobEnd]",
								"storedProcedureParameters": {
									"jobId": {
										"type": "String",
										"value": {
											"value": "@variables('JobId')",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "src_logJobEnd",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Log Message2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Log Job End",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[sp_GetLogStatus]",
								"storedProcedureParameters": {
									"JobId": {
										"type": "Int32",
										"value": {
											"value": "@variables('JobId')",
											"type": "Expression"
										}
									},
									"LogType": {
										"type": "String",
										"value": "Job"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "getlogmessage",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Summary2",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Log Message2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Summary",
							"value": {
								"value": "@activity('Get Log Message2').output.value[0].Summary",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Icon2",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Log Message2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Icon",
							"value": {
								"value": "@activity('Get Log Message2').output.value[0].Icon",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Push Slack Notification2",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Summary2",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Icon2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://hooks.slack.com/services/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",
							"method": "POST",
							"headers": {
								"Content-Type": "text/plain"
							},
							"body": {
								"value": "@concat('{\n    \"text\": \"', variables('Summary'),variables('Icon'), '\"\n}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Execute Pipeline2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Get Process Id",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Child Email Compaign",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"ProcessId": {
									"value": "@variables('ProcessId')",
									"type": "Expression"
								},
								"JobId": {
									"value": "@variables('JobId')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ForEach Collection Lookup",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set Process Id",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT\n[FileToDownload],\n[AppendDateToFileName],\n[FileColumnHeaders],\n[BlobStorageContainer1],\n[Mandatory]\nFROM dbo.EmailMetadata",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQL_Scripts_dataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"JobId": {
						"type": "String",
						"defaultValue": "1"
					},
					"PackageDescr": {
						"type": "String",
						"defaultValue": "Email Campaigns ETL"
					},
					"Setdate": {
						"type": "String",
						"defaultValue": "@utcnow()"
					},
					"Date": {
						"type": "String",
						"defaultValue": "2022-08-29"
					},
					"ShowResult": {
						"type": "Boolean",
						"defaultValue": true
					},
					"ProcessId": {
						"type": "String",
						"defaultValue": "1"
					},
					"loopArray": {
						"type": "Array",
						"defaultValue": [
							"1"
						]
					},
					"Summary": {
						"type": "String"
					},
					"Icon": {
						"type": "String"
					},
					"FileDate": {
						"type": "String",
						"defaultValue": "@utcnow()"
					},
					"CurrentDate": {
						"type": "String",
						"defaultValue": "@formatDateTime(addDays(utcnow(),-1),'yyyy-MM-dd')"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-09-10T12:27:11Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Child Email Compaign')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Income Access')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set Date",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "SetDate",
							"value": {
								"value": "@formatDateTime(concat(formatDateTime(utcnow(),'MM/dd/yyyy')), 'MM/dd/yyyy')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Log Start",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set Date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[LogJob]",
								"storedProcedureParameters": {
									"JobName": {
										"type": "String",
										"value": {
											"value": "@variables('PackageDescr')",
											"type": "Expression"
										}
									},
									"JobParams": {
										"type": "String",
										"value": {
											"value": "@concat('Load Date = ',formatDateTime(variables('SetDate'),'dd/MM/yyyy'))",
											"type": "Expression"
										}
									},
									"JobStatus": {
										"type": "String",
										"value": "Started"
									},
									"ModifiedBy": {
										"type": "String",
										"value": "tomjone@mail.com"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Income_SpLogJobId",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Truncate import tables",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Set Job Id",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "LS_AzureSQLDB",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "TRUNCATE TABLE import.PlayerAccount;\nTRUNCATE TABLE import.SiteEarning;\nTRUNCATE TABLE import.PaymentHistory;\nTRUNCATE TABLE import.Merchant;\nTRUNCATE TABLE import.ACIDReport;"
								}
							]
						}
					},
					{
						"name": "Get MTD List",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Truncate import tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[sp_GetExecutionPeriod]",
								"storedProcedureParameters": {
									"DayMarker": {
										"type": "DateTime",
										"value": {
											"value": "@variables('SetDate')",
											"type": "Expression"
										}
									},
									"Period": {
										"type": "String",
										"value": "MTD"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SpGetMTDList",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Set Job Id",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Log Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "JobId",
							"value": {
								"value": "@{activity('Log Start').output.firstRow.JobId}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set DateList",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get MTD List",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "DateList",
							"value": {
								"value": "@activity('Get MTD List').output.value",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get Active Brands",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set DateList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT Brand FROM DIM.Brand WHERE Active != 0 \nAND IaStartDate <= Convert(varchar,', variables('SetDate'),'101)')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "GetActiveBrands",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Set Brand List",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Active Brands",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "BandList",
							"value": {
								"value": "@activity('Get Active Brands').output.value",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get Active Brands ACID",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set Brand List",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT Brand FROM DIM.Brand WHERE Active != 0 \nAND IaStartDate <= Convert(varchar,', variables('SetDate'),'101)')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "GetActiveBrandsACID",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Set BrandList_ACID",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Active Brands ACID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "BrandList_ACID",
							"value": {
								"value": "@activity('Get Active Brands ACID').output.value",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Foreach Date in MTD",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Set BrandList_ACID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('DateList')",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Brand List Plyr Acct",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT Brand FROM DIM.Brand WHERE Active != 0 \nAND IaStartDate <= Convert(varchar,', variables('CurrentDate'),',101)')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "BrandListPlyrAcct",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "Set BrandList_PA",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Brand List Plyr Acct",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "BrandList_PA",
										"value": {
											"value": "@activity('Brand List Plyr Acct').output.value",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Log CSV Import",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Set BrandList_PA",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[dbo].[LogProcess]",
											"storedProcedureParameters": {
												"JobId": {
													"type": "Int32",
													"value": {
														"value": "@variables('JobId')",
														"type": "Expression"
													}
												},
												"ModifiedBy": {
													"type": "String",
													"value": "tomjones@mail.com"
												},
												"ProcessName": {
													"type": "String",
													"value": {
														"value": "@variables('PackageDescr')",
														"type": "Expression"
													}
												},
												"ProcessParams": {
													"type": "String",
													"value": {
														"value": "@concat('Load Date = ',variables('CurrentDate'))",
														"type": "Expression"
													}
												},
												"ProcessStatus": {
													"type": "String",
													"value": "Started"
												},
												"ProcessType": {
													"type": "String",
													"value": "SSIS Import"
												},
												"ShowResult": {
													"type": "Boolean",
													"value": {
														"value": "@variables('ShowResult')",
														"type": "Expression"
													}
												}
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "Log_CSVImport",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": true
									}
								},
								{
									"name": "Set ProcessId_PA",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Log CSV Import",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "ProcessId_PA",
										"value": {
											"value": "@{activity('Log CSV Import').output.firstRow.ProcessId}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Execute Child Income Access",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Set ProcessId_PA",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Child Income Access",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"ProcessId_PA": {
												"value": "@variables('ProcessId_PA')",
												"type": "Expression"
											},
											"CurrentDate": {
												"value": "@variables('CurrentDate')",
												"type": "Expression"
											},
											"Brand_PA": {
												"value": "@variables('Brand_PA')",
												"type": "Expression"
											},
											"Brand": {
												"value": "@variables('Brand')",
												"type": "Expression"
											},
											"BrandList_PA": {
												"value": "@variables('BrandList_PA')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Log CSV_Import",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Foreach Date in MTD",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[LogProcess]",
								"storedProcedureParameters": {
									"JobId": {
										"type": "Int32",
										"value": {
											"value": "@variables('JobId')",
											"type": "Expression"
										}
									},
									"ModifiedBy": {
										"type": "String",
										"value": "tomjones@mail.com"
									},
									"ProcessName": {
										"type": "String",
										"value": {
											"value": "@variables('PackageDescr')",
											"type": "Expression"
										}
									},
									"ProcessParams": {
										"type": "String",
										"value": null
									},
									"ProcessStatus": {
										"type": "String",
										"value": "Started"
									},
									"ProcessType": {
										"type": "String",
										"value": "SSIS Import"
									},
									"ShowResult": {
										"type": "Boolean",
										"value": {
											"value": "@variables('ShowResult')",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "LogCSV_Import",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "ForEach Merchant List",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Set Process Id",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('BandList')",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Get Member Group List Arg",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('DECLARE DateStr VARCHAR(10) = ','''',variables('CurrentDate'),'''',',',\n' ContainerParam VARCHAR(100) =','''', variables('BlobContainerIncomeAccess'),'''',',',\n' RayGunKey VARCHAR(100) = ','''',variables('RayGunApiKey'),'''',',',\n' BrandId VARCHAR(100) =','''', variables('Brand_PA'),'''',',',\n' AccountName VARCHAR(100) =','''', variables('BlobStorageAccountName'),'''',',',\n' AccountKey VARCHAR(1024) =','''', variables('BlobStorageAccountKey'),'''',\n\n'SELECT ''/C '' + \n\tREPLACE(REPLACE(REPLACE(REPLACE(ArgumentText, ''DateParam'', DateStr), ''AccountName'', AccountName), ''AccountKey'', AccountKey), ''ContainerParam'', ContainerParam) + '' '' + RayGunKey ArgumentText \nFROM config.IncomeAccessFeed \nWHERE FeedType = ''Member Group List''\nAND Brand = BrandId\n')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "GetMemberGroupListArg",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "Set Current member File",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Get Member Group List Arg",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "CurrentCsvMemberGroupList",
										"value": {
											"value": "@concat('incomeaccess_membergrouplist_',variables('Brand'),'_',formatDateTime(utcnow(),'yyyyMMdd'),'.csv'\n)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Populate import_Member",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Check File Exist",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "src_ImportMember",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "tgt_importMerchant",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Check File Exist",
									"type": "GetMetadata",
									"dependsOn": [
										{
											"activity": "Set Current member File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "src_ImportMember",
											"type": "DatasetReference",
											"parameters": {}
										},
										"fieldList": [
											"exists"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "Log_CSV_Fail",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Check File Exist",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[dbo].[LogProcessError]",
											"storedProcedureParameters": {
												"Param1": {
													"type": "String",
													"value": {
														"value": "@variables('CurrentCsvMemberGroupList')",
														"type": "Expression"
													}
												},
												"ProcessId": {
													"type": "String",
													"value": {
														"value": "@variables('ProcessId_PA')",
														"type": "Expression"
													}
												}
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "log_CSV_Fail",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							]
						}
					},
					{
						"name": "Log CSV_Import_End",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEach Merchant List",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[LogProcessEnd]",
								"storedProcedureParameters": {
									"ProcessId": {
										"type": "Int32",
										"value": {
											"value": "@variables('ProcessId')",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "LogCSVImportEnd",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set Process Id",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Log CSV_Import",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ProcessId",
							"value": {
								"value": "@{activity('Log CSV_Import').output.firstRow.ProcessId}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Log CSV Import ACID",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Log CSV_Import_End",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[LogProcess]",
								"storedProcedureParameters": {
									"JobId": {
										"type": "Int32",
										"value": {
											"value": "@variables('JobId')",
											"type": "Expression"
										}
									},
									"ModifiedBy": {
										"type": "String",
										"value": "tomjones@mail.com"
									},
									"ProcessName": {
										"type": "String",
										"value": {
											"value": "@variables('PackageDescr')",
											"type": "Expression"
										}
									},
									"ProcessParams": {
										"type": "String",
										"value": null
									},
									"ProcessStatus": {
										"type": "String",
										"value": "Started"
									},
									"ProcessType": {
										"type": "String",
										"value": "SSIS Import"
									},
									"ShowResult": {
										"type": "Boolean",
										"value": {
											"value": "@variables('ShowResult')",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "LogCSVImportACID",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "ForEach ACID",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Set ACID ProcessId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('BrandList_ACID')",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Get Member_Group_List_Arg",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('DECLARE DateStr VARCHAR(10) = ','''',variables('CurrentDate'),'''',',',\n' ContainerParam VARCHAR(100) =','''', variables('BlobContainerIncomeAccess'),'''',',',\n' RayGunKey VARCHAR(100) = ','''',variables('RayGunApiKey'),'''',',',\n' BrandId VARCHAR(100) =','''', variables('Brand_PA'),'''',',',\n' AccountName VARCHAR(100) =','''', variables('BlobStorageAccountName'),'''',',',\n' AccountKey VARCHAR(1024) =','''', variables('BlobStorageAccountKey'),'''',\n\n'SELECT ''/C '' + \n\tREPLACE(REPLACE(REPLACE(REPLACE(ArgumentText, ''DateParam'', DateStr), ''AccountName'', AccountName), ''AccountKey'', AccountKey), ''ContainerParam'', ContainerParam) + '' '' + RayGunKey ArgumentText \nFROM config.IncomeAccessFeed \nWHERE FeedType = ''ACID Report''\nAND Brand = BrandId\n')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "GetMemberGroupListArgACID",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "CurrentCsvACIDReport",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Get Member_Group_List_Arg",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "CurrentCsvACIDReport",
										"value": {
											"value": "@concat('incomeaccess_acidapi_',variables('Brand'),'_',formatDateTime(utcnow(),'yyyyMMdd'),'.csv'\n)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Populate ACID",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "CurrentCsvACIDReport",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "src_PopulateACID",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "tgt_ImportACID",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "logcsvfail",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Populate ACID",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[dbo].[LogProcessError]",
											"storedProcedureParameters": {
												"Param1": {
													"type": "String",
													"value": {
														"value": "@variables('CurrentCsvACIDReport')",
														"type": "Expression"
													}
												},
												"ProcessId": {
													"type": "String",
													"value": {
														"value": "@variables('ProcessId')",
														"type": "Expression"
													}
												}
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "logcsvfail",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							]
						}
					},
					{
						"name": "Log CSV import ACID end",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEach ACID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[LogProcessEnd]",
								"storedProcedureParameters": {
									"ProcessId": {
										"type": "Int32",
										"value": {
											"value": "@{variables('ProcessId')}",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "LogCSVimportACIDend",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Execute Child Income Access Sp Exec",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Log CSV import ACID end",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Child Income Access Sp Exec",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobId": {
									"value": "@variables('JobId')",
									"type": "Expression"
								},
								"SetDate": {
									"value": "@variables('SetDate')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "get ACID log message",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Log CSV import ACID end",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[sp_GetLogStatus]",
								"storedProcedureParameters": {
									"JobId": {
										"type": "Int32",
										"value": {
											"value": "@variables('JobId')",
											"type": "Expression"
										}
									},
									"LogType": {
										"type": "String",
										"value": "Job"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "getACIDlogmessage",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Summary",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "get ACID log message",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Summary",
							"value": {
								"value": "@activity('get ACID log message').output.value[0].Summary",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Icon",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "get ACID log message",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Icon",
							"value": {
								"value": "@activity('get ACID log message').output.value[0].Icon",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Slack Notification",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Summary",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Icon",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://hooks.slack.com/services/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",
							"method": "POST",
							"headers": {
								"Content-Type": "text/plain"
							},
							"body": {
								"value": "@concat('{\n    \"text\": \"', variables('Summary'),variables('Icon'), '\"\n}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set ACID ProcessId",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Log CSV Import ACID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ProcessId",
							"value": {
								"value": "@{activity('Log CSV Import ACID').output.firstRow.ProcessId}",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"SetDate": {
						"type": "String"
					},
					"PackageDescr": {
						"type": "String",
						"defaultValue": "Income Access ETL"
					},
					"JobId": {
						"type": "String"
					},
					"DateList": {
						"type": "Array"
					},
					"BandList": {
						"type": "Array"
					},
					"BrandList_ACID": {
						"type": "Array"
					},
					"CurrentDate": {
						"type": "String",
						"defaultValue": "2021/02/15"
					},
					"BrandList_PA": {
						"type": "Array"
					},
					"ShowResult": {
						"type": "Boolean",
						"defaultValue": true
					},
					"ProcessId_PA": {
						"type": "String"
					},
					"Brand_PA": {
						"type": "String",
						"defaultValue": "SpinRider"
					},
					"Brand": {
						"type": "String",
						"defaultValue": "SpinRider"
					},
					"BlobContainerIncomeAccess": {
						"type": "String",
						"defaultValue": "incomeaccess"
					},
					"BlobStorageAccountKey": {
						"type": "String"
					},
					"BlobStorageAccountName": {
						"type": "String"
					},
					"BlobStorageContainer": {
						"type": "String",
						"defaultValue": "a"
					},
					"RayGunApiKey": {
						"type": "String"
					},
					"CurrentCsvMemberGroupList": {
						"type": "String"
					},
					"ProcessId": {
						"type": "String"
					},
					"CurrentCsvACIDReport": {
						"type": "String"
					},
					"Summary": {
						"type": "String"
					},
					"Icon": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-10-06T13:53:10Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Child Income Access Sp Exec')]",
				"[concat(variables('factoryId'), '/pipelines/Child Income Access')]",
				"[concat(variables('factoryId'), '/datasets/tgt_importMerchant')]"
			]
		}
	]
}